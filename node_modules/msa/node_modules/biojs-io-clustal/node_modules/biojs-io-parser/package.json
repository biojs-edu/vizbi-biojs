{
  "name": "biojs-io-parser",
  "version": "1.0.0",
  "description": "A generic BioJS parser",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha -u qunit -C"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/biojs/biojs-io-parser"
  },
  "keywords": [
    "parser",
    "generic"
  ],
  "author": {
    "name": "BioJS",
    "email": "biojs@googlegroups.com",
    "url": "http://biojs.net"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/biojs/biojs-io-parser/issues"
  },
  "homepage": "https://github.com/biojs/biojs-io-parser",
  "browser": {
    "request": "xhr"
  },
  "devDependencies": {
    "chai": "^2.1.0",
    "mocha": "^2.1.0",
    "nock": "^0.59.1"
  },
  "dependencies": {
    "request": "^2.53.0",
    "vow": "^0.4.8",
    "xhr": "^2.0.1"
  },
  "readme": "biojs-io-parser\n===============\n\nA small, generic parser module.\nIt expects that you provide at least a method `parse` (see below for more details).\n\n\nProvided methods\n---------------\n\n#### `read(url)`\n\nParses an url an calls your `parse` method with the returned body.\n\n```\nparser.read(\"http://your-url\", function(err, model) {\n\t// model is the parsed url\n});\n```\nIf callback is undefined, `read` returns a promise.\n\n```\nparser.read(\"http://your-url\").then(function(model) {\n\t// model is the parsed url\n}, function(err){\n\tconsole.error(\"err happened during downloading\", err);\n});\n```\n \n(more to come)\n\nExpected methods\n----------------\n\nYour parser should have the following methods:\n\n* `parse`: Takes in an entire file as string and returns the JSON representation\n\nOptional:\n\n* `write`: Takes the JSON representation of a file and writes it in the custom format\n\nIf the file is line-by-line, one should create a `new` instance of the parser:\n\n* `parseLine`: parses another line\n* `result`: returns the current, resulting object of the parsing process.\n\nHow to extend\n-------------\n\n### With functions\n\n```\nvar parser = function(){\n  this.parse = function(data){\n      return data;\n  };\n  Parser.mixin(this);\n};\n```\n\n\n\n### With objects\n\n```\nvar throughParserAlt = {\n  parse: function(data) {\n    return data;\n  }\n};\n``` \n\n\nLicense\n-------\n\nApache 2\n",
  "readmeFilename": "README.md",
  "gitHead": "34c6dd074d20a791f063af6091dc7518e76a3c76",
  "_id": "biojs-io-parser@1.0.0",
  "_shasum": "513b7e4cba20c9ec6401734e607732432378ba41",
  "_from": "biojs-io-parser@>=1.0.0 <2.0.0"
}
