// Generated by CoffeeScript 1.9.0
var MenuBuilder, OrderingMenu, dom, _;

MenuBuilder = require("../menubuilder");

dom = require("dom-helper");

_ = require('underscore');

module.exports = OrderingMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    this.order = "ID";
    return this.el.style.display = "inline-block";
  },
  setOrder: function(order) {
    this.order = order;
    return this.render();
  },
  render: function() {
    var comps, el, m, _i, _len;
    this.setName("Ordering");
    this.removeAllNodes();
    comps = this.getComparators();
    for (_i = 0, _len = comps.length; _i < _len; _i++) {
      m = comps[_i];
      this._addNode(m);
    }
    el = this.buildDOM();
    dom.removeAllChilds(this.el);
    this.el.appendChild(el);
    return this;
  },
  _addNode: function(m) {
    var style, text;
    text = m.text;
    style = {};
    if (text === this.order) {
      style.backgroundColor = "#77ED80";
    }
    return this.addNode(text, (function(_this) {
      return function() {
        if (m.precode != null) {
          m.precode();
        }
        _this.model.comparator = m.comparator;
        _this.model.sort();
        return _this.setOrder(m.text);
      };
    })(this), {
      style: style
    });
  },
  getComparators: function() {
    var models, setIdent;
    models = [];
    models.push({
      text: "ID",
      comparator: "id"
    });
    models.push({
      text: "ID Desc",
      comparator: function(a, b) {
        return -("" + a.get("id")).localeCompare("" + b.get("id"), [], {
          numeric: true
        });
      }
    });
    models.push({
      text: "Label",
      comparator: "name"
    });
    models.push({
      text: "Label Desc",
      comparator: function(a, b) {
        return -a.get("name").localeCompare(b.get("name"));
      }
    });
    models.push({
      text: "Seq",
      comparator: "seq"
    });
    models.push({
      text: "Seq Desc",
      comparator: function(a, b) {
        return -a.get("seq").localeCompare(b.get("seq"));
      }
    });
    setIdent = (function(_this) {
      return function() {
        return _this.ident = _this.g.stats.identity();
      };
    })(this);
    models.push({
      text: "Identity",
      comparator: (function(_this) {
        return function(a, b) {
          var val;
          val = _this.ident[a.id] - _this.ident[b.id];
          if (val > 0) {
            return 1;
          }
          if (val < 0) {
            return -1;
          }
          return 0;
        };
      })(this),
      precode: setIdent
    });
    models.push({
      text: "Identity Desc",
      comparator: (function(_this) {
        return function(a, b) {
          var val;
          val = _this.ident[a.id] - _this.ident[b.id];
          if (val > 0) {
            return -1;
          }
          if (val < 0) {
            return 1;
          }
          return 0;
        };
      })(this),
      precode: setIdent
    });
    models.push({
      text: "Reference",
      comparator: function(seq) {
        return !seq.get("ref");
      }
    });
    models.push({
      text: "Partition codes",
      comparator: "partition",
      precode: (function(_this) {
        return function() {
          _this.g.vis.set('labelPartition', true);
          return _this.model.each(function(el) {
            return el.set('partition', _.random(1, 3));
          });
        };
      })(this)
    });
    return models;
  }
});
