// Generated by CoffeeScript 1.9.0
var boneView, dom, k, sel, _;

boneView = require("backbone-childs");

_ = require('underscore');

k = require('koala-js');

dom = require('dom-helper');

sel = require("../g/selection/Selection");

module.exports = boneView.extend({
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.user, "change:searchText", function(model, prop) {
      this.search(prop);
      return this.render();
    });
    this.sel = [];
    return this.selPos = 0;
  },
  events: {
    "scroll": "_sendScrollEvent"
  },
  render: function() {
    var searchText;
    this.renderSubviews();
    this.el.className = "biojs_msa_searchresult";
    searchText = this.g.user.get("searchText");
    if ((searchText != null) && searchText.length > 0) {
      if (this.sel.length === 0) {
        this.el.textContent = "no selection found";
      } else {
        this.resultBox = k.mk("div");
        this.resultBox.className = "biojs_msa_searchresult_ovbox";
        this.updateResult();
        this.el.appendChild(this.resultBox);
        this.el.appendChild(this.buildBtns());
      }
    }
    return this;
  },
  updateResult: function() {
    var seli, text;
    text = "search pattern: " + this.g.user.get("searchText");
    text += ", selection: " + (this.selPos + 1);
    seli = this.sel[this.selPos];
    text += " (";
    text += seli.get("xStart") + " - " + seli.get("xEnd");
    text += ", id: " + seli.get("seqId");
    text += ")";
    return this.resultBox.textContent = text;
  },
  buildBtns: function() {
    var allBtn, nextBtn, prevBtn, searchrow;
    prevBtn = k.mk("button");
    prevBtn.textContent = "Prev";
    prevBtn.addEventListener("click", (function(_this) {
      return function() {
        return _this.moveSel(-1);
      };
    })(this));
    nextBtn = k.mk("button");
    nextBtn.textContent = "Next";
    nextBtn.addEventListener("click", (function(_this) {
      return function() {
        return _this.moveSel(1);
      };
    })(this));
    allBtn = k.mk("button");
    allBtn.textContent = "All";
    allBtn.addEventListener("click", (function(_this) {
      return function() {
        return _this.g.selcol.reset(_this.sel);
      };
    })(this));
    searchrow = k.mk("div");
    searchrow.appendChild(prevBtn);
    searchrow.appendChild(nextBtn);
    searchrow.appendChild(allBtn);
    searchrow.className = "biojs_msa_searchresult_row";
    return searchrow;
  },
  moveSel: function(relDist) {
    var selNew;
    selNew = this.selPos + relDist;
    if (selNew < 0 || selNew >= this.sel.length) {
      return -1;
    } else {
      this.focus(selNew);
      this.selPos = selNew;
      return this.updateResult();
    }
  },
  focus: function(selPos) {
    var leftIndex, seli;
    seli = this.sel[selPos];
    leftIndex = seli.get("xStart");
    this.g.zoomer.setLeftOffset(leftIndex);
    return this.g.selcol.reset([seli]);
  },
  search: function(searchText) {
    var leftestIndex, newSeli, origIndex, search;
    search = new RegExp(searchText, "gi");
    newSeli = [];
    leftestIndex = origIndex = 100042;
    this.model.each(function(seq) {
      var args, index, match, strSeq, _results;
      strSeq = seq.get("seq");
      _results = [];
      while (match = search.exec(strSeq)) {
        index = match.index;
        args = {
          xStart: index,
          xEnd: index + match[0].length - 1,
          seqId: seq.get("id")
        };
        newSeli.push(new sel.possel(args));
        _results.push(leftestIndex = Math.min(index, leftestIndex));
      }
      return _results;
    });
    this.g.selcol.reset(newSeli);
    if (leftestIndex === origIndex) {
      leftestIndex = 0;
    }
    this.g.zoomer.setLeftOffset(leftestIndex);
    return this.sel = newSeli;
  }
});
