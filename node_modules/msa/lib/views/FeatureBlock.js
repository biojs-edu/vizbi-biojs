// Generated by CoffeeScript 1.9.0
({
  appendFeature: function(data) {
    var beforeStyle, beforeWidth, boxHeight, boxWidth, f, width;
    f = data.f;
    boxWidth = this.g.zoomer.get("columnWidth");
    boxHeight = this.g.zoomer.get("rowHeight");
    width = (f.get("xEnd") - f.get("xStart")) * boxWidth;
    beforeWidth = this.ctx.lineWidth;
    this.ctx.lineWidth = 3;
    beforeStyle = this.ctx.strokeStyle;
    this.ctx.strokeStyle = f.get("fillColor");
    this.ctx.strokeRect(data.xZero, data.yZero, width, boxHeight);
    this.ctx.strokeStyle = beforeStyle;
    return this.ctx.lineWidth = beforeWidth;
  },
  drawFeature: function(data) {
    var f, features, j, rectHeight, rectWidth, seq, start, starts, x, xZero, yZero, _i, _j, _len, _ref, _results;
    seq = data.model.get("seq");
    rectWidth = this.g.zoomer.get("columnWidth");
    rectHeight = this.g.zoomer.get("rowHeight");
    start = Math.max(0, Math.abs(Math.ceil(-this.g.zoomer.get('_alignmentScrollLeft') / rectWidth)));
    x = -Math.abs(-this.g.zoomer.get('_alignmentScrollLeft') % rectWidth);
    xZero = x - start * rectWidth;
    features = data.model.get("features");
    yZero = data.y;
    _results = [];
    for (j = _i = start, _ref = seq.length - 1; _i <= _ref; j = _i += 1) {
      starts = features.startOn(j);
      if (data.hidden.indexOf(j) >= 0) {
        continue;
      }
      if (starts.length > 0) {
        for (_j = 0, _len = starts.length; _j < _len; _j++) {
          f = starts[_j];
          this.appendFeature({
            f: f,
            xZero: x,
            yZero: yZero
          });
        }
      }
      x = x + rectWidth;
      if (x > this.el.width) {
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
});
